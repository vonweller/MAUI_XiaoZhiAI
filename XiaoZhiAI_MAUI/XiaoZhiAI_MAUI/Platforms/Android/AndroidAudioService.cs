using Android;
using Android.Content;
using Android.Media;
using AndroidX.Core.App;
using AndroidX.Core.Content;
using Microsoft.Maui.Controls;
using System.Diagnostics;
using XiaoZhiAI_MAUI.Services;
using AudioSource = Android.Media.AudioSource;

namespace XiaoZhiAI_MAUI.Platforms.Android
{
    public class AndroidAudioService : IPlatformAudioService
    {
        private AudioTrack? _audioTrack;
        private bool _isPlaying = false;
        
        public event EventHandler<float[]> AudioDataReceived;

        public async Task InitializeAsync()
        {
            try
            {
                Debug.WriteLine("=== ÂàùÂßãÂåñAndroidÈü≥È¢ëÊúçÂä° ===");
                
                // Ê£ÄÊü•ÊùÉÈôê
                await CheckPermissions();
                
                // Ëé∑ÂèñContext
                var context = Platform.CurrentActivity ?? Microsoft.Maui.ApplicationModel.Platform.CurrentActivity;
                if (context == null)
                {
                    Debug.WriteLine("‚ùå Êó†Ê≥ïËé∑ÂèñContext");
                    return;
                }
                
                // Âè™ÂàùÂßãÂåñÊí≠ÊîæÁªÑ‰ª∂ÔºåÂΩïÈü≥ÁªÑ‰ª∂Âú®ÈúÄË¶ÅÊó∂ÂàõÂª∫
                await InitializeAudioTrack();
                
                Debug.WriteLine("‚úÖ AndroidÈü≥È¢ëÊúçÂä°ÂàùÂßãÂåñÂÆåÊàê - Á≠âÂæÖÁî®Êà∑ÊâãÂä®Ëß¶ÂèëÂΩïÈü≥");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå Èü≥È¢ëÊúçÂä°ÂàùÂßãÂåñÂ§±Ë¥•: {ex.Message}");
                throw;
            }
        }

        private async Task CheckPermissions()
        {
            var context = Platform.CurrentActivity ?? Microsoft.Maui.ApplicationModel.Platform.CurrentActivity;
            if (context == null)
            {
                Debug.WriteLine("‚ùå Êó†Ê≥ïËé∑ÂèñContext");
                return;
            }

            var recordPermission = ContextCompat.CheckSelfPermission(context, Manifest.Permission.RecordAudio);
            Debug.WriteLine($"üîç ÂΩïÈü≥ÊùÉÈôêÁä∂ÊÄÅ: {recordPermission}");
            
            if (recordPermission != AndroidX.Core.Content.PermissionChecker.PermissionGranted)
            {
                Debug.WriteLine("üìã ËØ∑Ê±ÇÂΩïÈü≥ÊùÉÈôê");
                ActivityCompat.RequestPermissions(Platform.CurrentActivity, 
                    new string[] { Manifest.Permission.RecordAudio }, 100);
                await Task.Delay(1000);
            }
        }

        // ÂÆûÁé∞ÁúüÊ≠£ÁöÑÂΩïÈü≥ÂäüËÉΩÔºà‰∏çËá™Âä®Êí≠ÊîæÂΩïÈü≥ÂÜÖÂÆπÔºâ
        private bool _isRecording = false;
        private CancellationTokenSource? _recordingCancellation;

        // IPlatformAudioServiceÊé•Âè£ÂÆûÁé∞ - ÂÆûÊó∂Èü≥È¢ëÊµÅÔºàÂèÇËÄÉUnityÔºâ
        public async Task StartRecordingAsync()
        {
            if (_isRecording)
            {
                Debug.WriteLine("‚ö†Ô∏è Â∑≤Âú®ÂΩïÈü≥‰∏≠ÔºåÂøΩÁï•ÈáçÂ§çÂêØÂä®");
                return;
            }

            try
            {
                Debug.WriteLine("üé§ AndroidÂºÄÂßãÂÆûÊó∂ÂΩïÈü≥...");
                
                _recordingCancellation?.Cancel();
                _recordingCancellation = new CancellationTokenSource();
                _isRecording = true;

                // ÂêØÂä®ÂÆûÊó∂Èü≥È¢ëÊçïËé∑‰ªªÂä°ÔºàÁ±ª‰ººUnityÁöÑSendAudioCoroutineÔºâ
                _ = Task.Run(() => RealTimeAudioCapture(_recordingCancellation.Token));
                
                Debug.WriteLine("‚úÖ AndroidÂÆûÊó∂ÂΩïÈü≥Â∑≤ÂêØÂä®");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå AndroidÂΩïÈü≥ÂêØÂä®Â§±Ë¥•: {ex.Message}");
                _isRecording = false;
            }
        }

        public async Task StopRecordingAsync()
        {
            if (!_isRecording)
            {
                Debug.WriteLine("‚ö†Ô∏è ÂΩìÂâçÊú™Âú®ÂΩïÈü≥ÔºåÂøΩÁï•ÂÅúÊ≠¢ËØ∑Ê±Ç");
                return;
            }

            try
            {
                Debug.WriteLine("üõë AndroidÂÅúÊ≠¢ÂÆûÊó∂ÂΩïÈü≥...");
                
                _isRecording = false;
                _recordingCancellation?.Cancel();
                
                Debug.WriteLine("‚úÖ AndroidÂÆûÊó∂ÂΩïÈü≥Â∑≤ÂÅúÊ≠¢ - ‰∏çÊí≠ÊîæÂΩïÈü≥ÂÜÖÂÆπ");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå AndroidÂÅúÊ≠¢ÂΩïÈü≥Â§±Ë¥•: {ex.Message}");
            }
        }

        // ÂÆûÊó∂Èü≥È¢ëÊçïËé∑ÔºàÂèÇËÄÉUnityÁöÑSendAudioCoroutineÔºâ
        private async Task RealTimeAudioCapture(CancellationToken cancellationToken)
        {
            AudioRecord? audioRecord = null;
            try
            {
                Debug.WriteLine("üé§ ÂºÄÂßãÂàùÂßãÂåñAudioRecordËøõË°åÂÆûÊó∂ÂΩïÈü≥...");

                // Èü≥È¢ëÂèÇÊï∞Ôºà‰∏éAudioService‰øùÊåÅ‰∏ÄËá¥Ôºâ
                const int SAMPLE_RATE = 16000; // 16kHzÂΩïÈü≥ÈááÊ†∑Áéá
                var CHANNEL_CONFIG = ChannelIn.Mono;
                var AUDIO_FORMAT = Encoding.Pcm16bit;
                
                // ËÆ°ÁÆóÁºìÂÜ≤Âå∫Â§ßÂ∞èÔºà60msÂ∏ß = 960ÈááÊ†∑Ôºâ
                int frameSize = 960; // 60ms at 16kHz
                int bufferSize = AudioRecord.GetMinBufferSize(SAMPLE_RATE, CHANNEL_CONFIG, AUDIO_FORMAT);
                bufferSize = Math.Max(bufferSize, frameSize * 4); // Á°Æ‰øùËá≥Â∞ëËÉΩÂÆπÁ∫≥Âá†Â∏ß

                Debug.WriteLine($"üé§ AudioRecordÂèÇÊï∞: ÈááÊ†∑Áéá={SAMPLE_RATE}, ÁºìÂÜ≤Âå∫={bufferSize}");

                // ÂàõÂª∫AudioRecord
                audioRecord = new AudioRecord(
                    AudioSource.Mic,
                    SAMPLE_RATE,
                    CHANNEL_CONFIG,
                    AUDIO_FORMAT,
                    bufferSize);

                if ((int)audioRecord.State != 1)
                {
                    Debug.WriteLine($"‚ùå AudioRecordÂàùÂßãÂåñÂ§±Ë¥•ÔºåÁä∂ÊÄÅ: {audioRecord.State}");
                    return;
                }

                Debug.WriteLine("‚úÖ AudioRecordÂàùÂßãÂåñÊàêÂäüÔºåÂºÄÂßãÂΩïÈü≥");
                audioRecord.StartRecording();

                // Èü≥È¢ëÊï∞ÊçÆÁºìÂÜ≤Âå∫
                var buffer = new short[frameSize]; // 960ÈááÊ†∑ÁöÑÁºìÂÜ≤Âå∫
                var floatBuffer = new float[frameSize];

                while (!cancellationToken.IsCancellationRequested && _isRecording)
                {
                    try
                    {
                        // ËØªÂèñÈü≥È¢ëÊï∞ÊçÆ
                        int readSamples = audioRecord.Read(buffer, 0, buffer.Length);
                        
                        if (readSamples > 0)
                        {
                            // ËΩ¨Êç¢‰∏∫floatÊï∞ÁªÑÔºà-1.0Âà∞1.0Ôºâ
                            for (int i = 0; i < readSamples; i++)
                            {
                                floatBuffer[i] = buffer[i] / 32768.0f;
                            }

                            // Â¶ÇÊûúËØªÂèñÁöÑÊ†∑Êú¨Êï∞‰∏çÂ§ü‰∏ÄÂ∏ßÔºåÂàôË°•Èõ∂
                            if (readSamples < frameSize)
                            {
                                for (int i = readSamples; i < frameSize; i++)
                                {
                                    floatBuffer[i] = 0.0f;
                                }
                            }

                            // Ëß¶ÂèëÈü≥È¢ëÊï∞ÊçÆ‰∫ã‰ª∂ÔºàÂèëÈÄÅÁªôAudioServiceÂ§ÑÁêÜÔºâ
                            AudioDataReceived?.Invoke(this, floatBuffer);
                        }
                        else
                        {
                            Debug.WriteLine($"‚ö†Ô∏è AudioRecordËØªÂèñÂ§±Ë¥•ÔºåËøîÂõûÂÄº: {readSamples}");
                        }

                        // Áü≠ÊöÇÂª∂ËøüÈÅøÂÖçËøáÂ∫¶Ê∂àËÄóCPU
                        await Task.Delay(10, cancellationToken);
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"‚ùå Èü≥È¢ëÊçïËé∑Âæ™ÁéØÂºÇÂ∏∏: {ex.Message}");
                        break;
                    }
                }

                Debug.WriteLine("üõë ÂÆûÊó∂Èü≥È¢ëÊçïËé∑ÁªìÊùü");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå ÂÆûÊó∂Èü≥È¢ëÊçïËé∑Â§±Ë¥•: {ex.Message}");
            }
            finally
            {
                try
                {
                    audioRecord?.Stop();
                    audioRecord?.Release();
                    audioRecord?.Dispose();
                    Debug.WriteLine("‚úÖ AudioRecordËµÑÊ∫êÂ∑≤ÈáäÊîæ");
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"‚ö†Ô∏è AudioRecordÈáäÊîæÂ§±Ë¥•: {ex.Message}");
                }
            }
        }

        public async Task PlayAudioAsync(float[] audioData)
        {
            try
            {
                if (audioData == null || audioData.Length == 0)
                {
                    Debug.WriteLine("‚ö†Ô∏è PlayAudioAsyncÊé•Êî∂Âà∞Á©∫ÁöÑÈü≥È¢ëÊï∞ÊçÆ");
                    return;
                }

                Debug.WriteLine($"üîä PlayAudioAsync: Êí≠Êîæ {audioData.Length} ‰∏™Èü≥È¢ëÈááÊ†∑");

                // ÂàùÂßãÂåñAudioTrackÁî®‰∫éÊí≠ÊîæPCMÊï∞ÊçÆ
                if (_audioTrack == null)
                {
                    await InitializeAudioTrack();
                }

                if (_audioTrack == null || (int)_audioTrack.State != 1)
                {
                    Debug.WriteLine("‚ùå AudioTrackÊú™Ê≠£Á°ÆÂàùÂßãÂåñ");
                    return;
                }

                // ËΩ¨Êç¢floatÊï∞ÁªÑ‰∏∫byteÊï∞ÁªÑ (16‰ΩçPCM)
                var byteData = new byte[audioData.Length * 2];
                for (int i = 0; i < audioData.Length; i++)
                {
                    // Â∞Üfloat(-1.0Âà∞1.0)ËΩ¨Êç¢‰∏∫16‰ΩçÊï¥Êï∞(-32768Âà∞32767)
                    var sample = (short)(Math.Max(-1.0f, Math.Min(1.0f, audioData[i])) * short.MaxValue);
                    byteData[i * 2] = (byte)(sample & 0xFF);
                    byteData[i * 2 + 1] = (byte)((sample >> 8) & 0xFF);
                }

                // ÂºÄÂßãÊí≠Êîæ
                if (_audioTrack.PlayState != PlayState.Playing)
                {
                    _audioTrack.Play();
                    Debug.WriteLine("üîä AudioTrackÂºÄÂßãÊí≠Êîæ");
                }

                // ÂÜôÂÖ•Èü≥È¢ëÊï∞ÊçÆ
                int written = _audioTrack.Write(byteData, 0, byteData.Length);
                Debug.WriteLine($"‚úÖ ÂÜôÂÖ•AudioTrack: {written}/{byteData.Length} Â≠óËäÇ");

                // Á≠âÂæÖÊí≠ÊîæÂÆåÊàêÔºà‰º∞ÁÆóÊí≠ÊîæÊó∂Èó¥Ôºâ
                double durationMs = (audioData.Length / 24000.0) * 1000; // 24kHzÈááÊ†∑Áéá
                await Task.Delay((int)Math.Max(50, durationMs));

            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå PlayAudioAsyncÂ§±Ë¥•: {ex.Message}");
            }
        }

        private async Task InitializeAudioTrack()
        {
            try
            {
                int bufferSize = AudioTrack.GetMinBufferSize(
                    24000, // 24kHzÈááÊ†∑ÁéáÔºå‰∏éAudioService‰∏≠ÁöÑPLAY_SAMPLE_RATE‰∏ÄËá¥
                    ChannelOut.Mono,
                    Encoding.Pcm16bit);

                Debug.WriteLine($"üîä ÂàùÂßãÂåñAudioTrackÔºåÁºìÂÜ≤Âå∫Â§ßÂ∞è: {bufferSize}");

                _audioTrack = new AudioTrack(
                    global::Android.Media.Stream.Music,
                    24000, // 24kHz
                    ChannelOut.Mono,
                    Encoding.Pcm16bit,
                    bufferSize * 2,
                    AudioTrackMode.Stream);

                if ((int)_audioTrack.State == 1)
                {
                    Debug.WriteLine("‚úÖ AudioTrackÂàùÂßãÂåñÊàêÂäü");
                }
                else
                {
                    Debug.WriteLine($"‚ùå AudioTrackÂàùÂßãÂåñÂ§±Ë¥•ÔºåÁä∂ÊÄÅ: {_audioTrack.State}");
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå AudioTrackÂàùÂßãÂåñÂºÇÂ∏∏: {ex.Message}");
            }
        }

        public void Dispose()
        {
            try
            {
                Debug.WriteLine("üóëÔ∏è ÈáäÊîæAndroidAudioServiceËµÑÊ∫ê");
                
                // ÂÅúÊ≠¢ÂΩïÈü≥
                _isRecording = false;
                _recordingCancellation?.Cancel();
                _recordingCancellation?.Dispose();
                
                // ÈáäÊîæÊí≠ÊîæËµÑÊ∫ê
                if (_audioTrack != null)
                {
                    if (_audioTrack.PlayState == PlayState.Playing)
                    {
                        _audioTrack.Stop();
                    }
                    _audioTrack.Release();
                    _audioTrack = null;
                }
                
                Debug.WriteLine("‚úÖ AndroidAudioServiceËµÑÊ∫êÈáäÊîæÂÆåÊàê");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"‚ùå ÈáäÊîæËµÑÊ∫êÂ§±Ë¥•: {ex.Message}");
            }
        }
    }
} 