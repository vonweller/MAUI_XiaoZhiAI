@page "/websocket-test"
@using XiaoZhiSharpMAUI.Services
@using Microsoft.Maui.ApplicationModel
@using Microsoft.Extensions.Logging
@inject ILogger<WebSocketTestPage> Logger
@inject IServiceProvider ServiceProvider
@implements IDisposable

<div class="container-fluid p-3">
    <h3>🔌 WebSocket 连接测试</h3>
    
    <!-- 诊断提示 -->
    @if (!string.IsNullOrEmpty(diagnosticMessage))
    {
        <div class="alert alert-warning">
            <h6>🔍 诊断提示:</h6>
            <p>@diagnosticMessage</p>
        </div>
    }
    
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>连接状态</h5>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <div class="alert @GetStatusAlertClass()">
                                <strong>状态:</strong> @connectionStatus
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="alert alert-info">
                                <strong>网络:</strong> @networkStatus
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="alert @GetConnectivityAlertClass()">
                                <strong>网络连通性:</strong> @connectivityStatus
                            </div>
                        </div>
                    </div>
                    
                    <div class="d-flex gap-2 mb-3 flex-wrap">
                        <button class="btn btn-success" 
                                @onclick="ConnectWebSocket" 
                                disabled="@(isConnecting || isConnected)">
                            🔌 连接
                        </button>
                        <button class="btn btn-danger" 
                                @onclick="DisconnectWebSocket" 
                                disabled="@(!isConnected)">
                            ❌ 断开
                        </button>
                        <button class="btn btn-warning" 
                                @onclick="SendHelloMessage" 
                                disabled="@(!isConnected)">
                            👋 发送Hello
                        </button>
                        <button class="btn btn-info" 
                                @onclick="TestNetworkConnectivity">
                            🌐 测试网络
                        </button>
                        <button class="btn btn-secondary" 
                                @onclick="ClearLogs">
                            🗑️ 清空日志
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>连接配置</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">WebSocket URL</label>
                        <input type="text" class="form-control" @bind="webSocketUrl" disabled="@isConnected" />
                        <div class="form-text">默认: wss://api.tenclass.net/xiaozhi/v1/</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Token</label>
                        <div class="input-group">
                            <input type="@(showToken ? "text" : "password")" 
                                   class="form-control" 
                                   @bind="token" 
                                   disabled="@isConnected" 
                                   placeholder="请输入有效的API Token" />
                            <button class="btn btn-outline-secondary" 
                                    type="button" 
                                    @onclick="ToggleTokenVisibility">
                                @(showToken ? "🙈" : "👁️")
                            </button>
                        </div>
                        <div class="form-text text-danger">⚠️ "test-token" 无效，请输入真实的API Token</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">设备ID</label>
                        <input type="text" class="form-control" @bind="deviceId" disabled="@isConnected" />
                        <div class="form-text">自动生成的设备标识符</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Session ID</label>
                        <input type="text" class="form-control" value="@sessionId" disabled />
                        <div class="form-text">连接成功后获得</div>
                    </div>
                    
                    <!-- 快速测试选项 -->
                    <div class="mb-3">
                        <h6>快速测试选项:</h6>
                        <div class="btn-group-vertical d-grid gap-2">
                            <button class="btn btn-outline-primary btn-sm" 
                                    @onclick="() => SetTestConfiguration(true)">
                                🧪 使用本地测试服务器
                            </button>
                            <button class="btn btn-outline-info btn-sm" 
                                    @onclick="() => SetTestConfiguration(false)">
                                🌐 使用生产服务器
                            </button>
                        </div>
                        <div class="form-text">本地测试可以验证网络配置是否正常</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>统计信息</h5>
                </div>
                <div class="card-body">
                    <p><strong>连接尝试次数:</strong> @connectionAttempts</p>
                    <p><strong>收到消息数:</strong> @messagesReceived</p>
                    <p><strong>发送消息数:</strong> @messagesSent</p>
                    <p><strong>二进制数据包:</strong> @binaryDataReceived</p>
                    <p><strong>错误次数:</strong> @errorCount</p>
                    <p><strong>连接时长:</strong> @GetConnectionDuration()</p>
                    
                    <!-- 诊断信息 -->
                    <hr>
                    <h6>系统信息:</h6>
                    <p><small><strong>设备平台:</strong> @DeviceInfo.Platform</small></p>
                    <p><small><strong>设备型号:</strong> @DeviceInfo.Model</small></p>
                    <p><small><strong>操作系统:</strong> @DeviceInfo.VersionString</small></p>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5>日志记录</h5>
                    <span class="badge bg-primary">@logs.Count 条记录</span>
                </div>
                <div class="card-body">
                    <div class="log-container" style="height: 400px; overflow-y: auto; background-color: #f8f9fa; padding: 10px; font-family: monospace; font-size: 12px;">
                        @foreach (var log in logs.OrderByDescending(l => l.Timestamp))
                        {
                            <div class="@GetLogClass(log.Level)">
                                <span class="text-muted">[@log.Timestamp.ToString("HH:mm:ss.fff")]</span>
                                <span class="fw-bold">[@log.Level]</span>
                                @log.Message
                            </div>
                        }
                        @if (!logs.Any())
                        {
                            <div class="text-muted">暂无日志记录...</div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private EnhancedWebSocketService? webSocketService;
    private string webSocketUrl = "wss://api.tenclass.net/xiaozhi/v1/";
    private string token = "test-token";
    private string deviceId = "";
    private string sessionId = "";
    private string connectionStatus = "未连接";
    private string networkStatus = "检查中...";
    private string connectivityStatus = "未测试";
    private string diagnosticMessage = "";
    private bool isConnecting = false;
    private bool isConnected = false;
    private bool showToken = false;
    
    // 统计信息
    private int connectionAttempts = 0;
    private int messagesReceived = 0;
    private int messagesSent = 0;
    private int binaryDataReceived = 0;
    private int errorCount = 0;
    private DateTime? connectionStartTime;
    
    // 日志
    private List<LogEntry> logs = new();
    
    protected override async Task OnInitializedAsync()
    {
        // 获取设备ID
        deviceId = XiaoZhiSharp.Utils.SystemInfo.GetMacAddress();
        
        // 检查网络状态
        await CheckNetworkStatus();
        
        // 显示初始诊断信息
        ShowDiagnosticMessage();
        
        AddLog("Info", "页面初始化完成");
        StateHasChanged();
    }
    
    private void ShowDiagnosticMessage()
    {
        if (token == "test-token")
        {
            diagnosticMessage = "当前使用的是测试token，这很可能是连接失败的原因。请联系服务提供商获取有效的API Token。";
        }
        else if (string.IsNullOrWhiteSpace(token))
        {
            diagnosticMessage = "请输入有效的API Token。没有token无法连接到WebSocket服务器。";
        }
        else
        {
            diagnosticMessage = "";
        }
    }
    
    private async Task CheckNetworkStatus()
    {
        try
        {
            var networkAccess = Connectivity.NetworkAccess;
            var profiles = Connectivity.ConnectionProfiles;
            
            networkStatus = $"{networkAccess} ({string.Join(", ", profiles)})";
            AddLog("Info", $"网络状态: {networkStatus}");
        }
        catch (Exception ex)
        {
            networkStatus = "检查失败";
            AddLog("Error", $"网络状态检查失败: {ex.Message}");
        }
    }
    
    private async Task TestNetworkConnectivity()
    {
        try
        {
            connectivityStatus = "测试中...";
            StateHasChanged();
            
            AddLog("Info", "开始网络连通性测试...");
            
            // 测试DNS解析
            try
            {
                var hostName = new Uri(webSocketUrl).Host;
                AddLog("Info", $"测试DNS解析: {hostName}");
                
                // 这里可以添加具体的DNS解析测试
                connectivityStatus = "DNS解析正常";
                AddLog("Success", "DNS解析测试通过");
            }
            catch (Exception ex)
            {
                connectivityStatus = $"DNS解析失败: {ex.Message}";
                AddLog("Error", $"DNS解析失败: {ex.Message}");
                return;
            }
            
            // 测试网络访问权限
            var networkAccess = Connectivity.NetworkAccess;
            if (networkAccess != NetworkAccess.Internet)
            {
                connectivityStatus = $"网络访问受限: {networkAccess}";
                AddLog("Warning", $"网络访问受限: {networkAccess}");
                return;
            }
            
            connectivityStatus = "网络连通正常";
            AddLog("Success", "网络连通性测试完成");
        }
        catch (Exception ex)
        {
            connectivityStatus = $"测试失败: {ex.Message}";
            AddLog("Error", $"网络连通性测试失败: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private void SetTestConfiguration(bool useLocal)
    {
        if (isConnected) return;
        
        if (useLocal)
        {
            webSocketUrl = "wss://echo.websocket.org/";
            token = "test";
            AddLog("Info", "已切换到本地测试配置");
            diagnosticMessage = "使用WebSocket Echo服务器进行基础连接测试。这有助于验证网络配置是否正常。";
        }
        else
        {
            webSocketUrl = "wss://api.tenclass.net/xiaozhi/v1/";
            token = "test-token";
            AddLog("Info", "已切换到生产服务器配置");
            ShowDiagnosticMessage();
        }
        
        StateHasChanged();
    }
    
    private void ToggleTokenVisibility()
    {
        showToken = !showToken;
        StateHasChanged();
    }
    
    private async Task ConnectWebSocket()
    {
        if (isConnecting || isConnected) return;
        
        try
        {
            isConnecting = true;
            connectionAttempts++;
            connectionStatus = "连接中...";
            
            // 检查token
            if (string.IsNullOrWhiteSpace(token))
            {
                connectionStatus = "Token不能为空";
                AddLog("Error", "连接失败: Token不能为空");
                return;
            }
            
            ShowDiagnosticMessage();
            AddLog("Info", $"开始连接WebSocket... (尝试 #{connectionAttempts})");
            AddLog("Info", $"URL: {webSocketUrl}");
            AddLog("Info", $"Token: {token.Substring(0, Math.Min(8, token.Length))}...");
            AddLog("Info", $"设备ID: {deviceId}");
            StateHasChanged();
            
            // 创建WebSocket服务
            var logger = ServiceProvider.GetRequiredService<ILogger<EnhancedWebSocketService>>();
            webSocketService = new EnhancedWebSocketService(webSocketUrl, token, deviceId, logger);
            
            // 订阅事件
            webSocketService.MessageReceived += OnMessageReceived;
            webSocketService.BinaryDataReceived += OnBinaryDataReceived;
            webSocketService.ConnectionStatusChanged += OnConnectionStatusChanged;
            webSocketService.ErrorOccurred += OnErrorOccurred;
            
            // 连接
            var success = await webSocketService.ConnectAsync();
            
            if (success)
            {
                isConnected = true;
                connectionStartTime = DateTime.Now;
                connectionStatus = "已连接";
                AddLog("Success", "WebSocket连接成功");
            }
            else
            {
                connectionStatus = "连接失败";
                AddLog("Error", "WebSocket连接失败");
                
                // 提供诊断建议
                if (token == "test-token")
                {
                    AddLog("Warning", "建议: 请使用有效的API Token替换 'test-token'");
                }
            }
        }
        catch (Exception ex)
        {
            connectionStatus = $"连接错误: {ex.Message}";
            AddLog("Error", $"连接异常: {ex.Message}");
            
            // 分析常见错误
            if (ex.Message.Contains("401") || ex.Message.Contains("Unauthorized"))
            {
                AddLog("Warning", "这是身份验证错误，请检查Token是否有效");
            }
            else if (ex.Message.Contains("403") || ex.Message.Contains("Forbidden"))
            {
                AddLog("Warning", "这是权限错误，请检查Token权限或设备ID");
            }
            else if (ex.Message.Contains("timeout"))
            {
                AddLog("Warning", "这是连接超时，请检查网络连接");
            }
            
            errorCount++;
        }
        finally
        {
            isConnecting = false;
            StateHasChanged();
        }
    }
    
    private async Task DisconnectWebSocket()
    {
        try
        {
            if (webSocketService != null)
            {
                await webSocketService.CloseAsync();
                webSocketService.Dispose();
                webSocketService = null;
            }
            
            isConnected = false;
            connectionStatus = "已断开";
            sessionId = "";
            connectionStartTime = null;
            AddLog("Info", "WebSocket已断开");
        }
        catch (Exception ex)
        {
            AddLog("Error", $"断开连接失败: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private async Task SendHelloMessage()
    {
        if (webSocketService == null || !isConnected) return;
        
        try
        {
            var helloMessage = XiaoZhiSharp.Protocols.WebSocketProtocol.Hello(sessionId);
            await webSocketService.SendTextAsync(helloMessage);
            messagesSent++;
            AddLog("Send", $"发送Hello消息: {helloMessage}");
        }
        catch (Exception ex)
        {
            AddLog("Error", $"发送消息失败: {ex.Message}");
            errorCount++;
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private void OnMessageReceived(object? sender, string message)
    {
        messagesReceived++;
        AddLog("Receive", $"收到文本消息: {message}");
        
        // 解析session_id
        if (message.Contains("session_id"))
        {
            sessionId = webSocketService?.SessionId ?? "";
        }
        
        InvokeAsync(() => StateHasChanged());
    }
    
    private void OnBinaryDataReceived(object? sender, byte[] data)
    {
        binaryDataReceived++;
        AddLog("Receive", $"收到二进制数据: {data.Length} 字节");
        InvokeAsync(() => StateHasChanged());
    }
    
    private void OnConnectionStatusChanged(object? sender, string status)
    {
        connectionStatus = status;
        AddLog("Status", $"连接状态变更: {status}");
        
        if (status.Contains("Connected"))
        {
            isConnected = true;
            connectionStartTime = DateTime.Now;
        }
        else if (status.Contains("Disconnected") || status.Contains("Failed"))
        {
            isConnected = false;
            connectionStartTime = null;
        }
        
        InvokeAsync(() => StateHasChanged());
    }
    
    private void OnErrorOccurred(object? sender, Exception ex)
    {
        errorCount++;
        AddLog("Error", $"WebSocket错误: {ex.Message}");
        InvokeAsync(() => StateHasChanged());
    }
    
    private void ClearLogs()
    {
        logs.Clear();
        StateHasChanged();
    }
    
    private void AddLog(string level, string message)
    {
        logs.Add(new LogEntry
        {
            Timestamp = DateTime.Now,
            Level = level,
            Message = message
        });
        
        // 保持日志条数在合理范围内
        if (logs.Count > 100)
        {
            logs.RemoveAt(0);
        }
    }
    
    private string GetStatusAlertClass()
    {
        if (isConnected) return "alert-success";
        if (isConnecting) return "alert-warning";
        if (connectionStatus.Contains("失败") || connectionStatus.Contains("错误")) return "alert-danger";
        return "alert-secondary";
    }
    
    private string GetConnectivityAlertClass()
    {
        if (connectivityStatus.Contains("正常")) return "alert-success";
        if (connectivityStatus.Contains("失败") || connectivityStatus.Contains("错误")) return "alert-danger";
        if (connectivityStatus.Contains("受限")) return "alert-warning";
        return "alert-secondary";
    }
    
    private string GetLogClass(string level)
    {
        return level switch
        {
            "Error" => "text-danger",
            "Success" => "text-success",
            "Send" => "text-primary",
            "Receive" => "text-info",
            "Status" => "text-warning",
            _ => "text-muted"
        };
    }
    
    private string GetConnectionDuration()
    {
        if (connectionStartTime == null) return "未连接";
        var duration = DateTime.Now - connectionStartTime.Value;
        return $"{duration.TotalMinutes:F1} 分钟";
    }
    
    public void Dispose()
    {
        webSocketService?.Dispose();
    }
    
    private class LogEntry
    {
        public DateTime Timestamp { get; set; }
        public string Level { get; set; } = "";
        public string Message { get; set; } = "";
    }
} 